#!/usr/bin/env python
import os

import aws_cdk as cdk
import json

from aws_cdk import Aspects

from stacks.api_stack import ApiStack
from stacks.cognito_stack import CognitoStack
from stacks.cognito_ui_stack import CognitoUiStack
from stacks.web_stack import WebStack

from cdk_nag import AwsSolutionsChecks, NagSuppressions, NagPackSuppression

local_region = cdk.Environment(
    account=os.environ["CDK_DEFAULT_ACCOUNT"], region="ap-southeast-2"
)
global_region = cdk.Environment(
    account=os.environ["CDK_DEFAULT_ACCOUNT"], region="us-east-1"
)

app = cdk.App()

env = app.node.try_get_context("env")

if env is None:
    raise ValueError("Environment not set")
else:
    params = json.load(open(f"parameters-{env}.json"))

    env_label = ""
    if env != "prod":
        env_label = f"-{env}"

    cognito_stack = CognitoStack(
        app,
        f"csk-admin-cognito{env_label}-stack",
        params,
        env=global_region,
        cross_region_references=True,
    )

    Aspects.of(cognito_stack).add(AwsSolutionsChecks())

    # have to suppress some nags at stack level because the resources that
    # are flagged are generated inside L2 constructs
    NagSuppressions.add_stack_suppressions(
        cognito_stack,
        suppressions=[
            NagPackSuppression(
                id="AwsSolutions-L1", reason="Lambda created by embedded library"
            ),
            NagPackSuppression(id="AwsSolutions-IAM4", reason="CDK-generated policy"),
            NagPackSuppression(
                id="AwsSolutions-IAM5", reason="CDK-generated IAM entity"
            ),
        ],
    )

    if params["user_pool_id"] != "":

        cognito_ui_stack = CognitoUiStack(
            app,
            f"csk-admin-cognito-ui{env_label}-stack",
            params,
            env=global_region,
            cross_region_references=True,
        ).add_dependency(cognito_stack)

        api_stack = ApiStack(
            app,
            f"csk-admin-api{env_label}-stack",
            params,
            env=local_region,
            cross_region_references=True,
        )

        web_stack = WebStack(
            app,
            f"csk-admin-web{env_label}-stack",
            api_stack.api,
            cognito_stack.user_pool_domain,
            params,
            env=global_region,
            cross_region_references=True,
        )

        Aspects.of(api_stack).add(AwsSolutionsChecks())
        Aspects.of(web_stack).add(AwsSolutionsChecks())

        NagSuppressions.add_stack_suppressions(
            api_stack,
            suppressions=[
                NagPackSuppression(
                    id="AwsSolutions-L1", reason="Lambda created by embedded library"
                ),
                NagPackSuppression(
                    id="AwsSolutions-COG4",
                    reason="The config and reporting routes use a Lambda authorizer",
                ),
                NagPackSuppression(id="AwsSolutions-APIG1", reason="Not required"),
                NagPackSuppression(
                    id="AwsSolutions-APIG4",
                    reason="OPTIONS method is generated by CDK and handled by APIG",
                ),
                NagPackSuppression(id="AwsSolutions-APIG6", reason="Not required"),
                NagPackSuppression(
                    id="AwsSolutions-IAM4", reason="CDK-generated policy"
                ),
                NagPackSuppression(
                    id="AwsSolutions-IAM5", reason="CDK-generated IAM entity"
                ),
            ],
        )
        NagSuppressions.add_stack_suppressions(
            web_stack,
            suppressions=[
                NagPackSuppression(
                    id="AwsSolutions-L1", reason="Lambda created by embedded library"
                ),
                NagPackSuppression(id="AwsSolutions-S1", reason="Not required"),
                NagPackSuppression(
                    id="AwsSolutions-S10",
                    reason="Not required and/or CDK-synthesized resource",
                ),
                NagPackSuppression(
                    id="AwsSolutions-IAM4", reason="CDK-generated policy"
                ),
                NagPackSuppression(
                    id="AwsSolutions-IAM5", reason="CDK-generated IAM entity"
                ),
            ],
        )

    Aspects.of(app).add(cdk.Tag("created-by", "CSK Admin Portal"))

    app.synth()
