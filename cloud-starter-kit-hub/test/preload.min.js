let fromEnv=require("@aws-sdk/credential-providers").fromEnv,{CloudFormationClient,DescribeStacksCommand,DescribeStackEventsCommand,CreateStackCommand,ValidateTemplateCommand,DeleteStackCommand}=require("@aws-sdk/client-cloudformation"),{CodePipelineClient,StartPipelineExecutionCommand,GetPipelineExecutionCommand}=require("@aws-sdk/client-codepipeline"),{EC2Client,DescribeRegionsCommand,DescribeVpcsCommand,DescribeSubnetsCommand,DescribeKeyPairsCommand,CreateKeyPairCommand,DescribeManagedPrefixListsCommand,DescribeInstanceTypesCommand,DescribeImagesCommand}=require("@aws-sdk/client-ec2"),{IAMClient,GetCredentialReportCommand}=require("@aws-sdk/client-iam"),Upload=require("@aws-sdk/lib-storage").Upload,{S3Client,ListBucketsCommand}=require("@aws-sdk/client-s3"),{SSMClient,GetParametersByPathCommand}=require("@aws-sdk/client-ssm"),{STSClient,GetCallerIdentityCommand}=require("@aws-sdk/client-sts"),{RDSClient,DescribeDBEngineVersionsCommand,DescribeOrderableDBInstanceOptionsCommand}=require("@aws-sdk/client-rds"),rootPath=require("electron-root-path").rootPath,path=require("path"),fs=require("fs"),JSZip=require("jszip"),yaml=require("js-yaml"),{contextBridge,ipcRenderer}=require("electron/renderer"),stacks=(contextBridge.exposeInMainWorld("api",{saveFile:(fileName,fileData)=>ipcRenderer.send("save-file-to-desktop",fileName,fileData),getHosts:()=>window.hosts,restartApp:()=>ipcRenderer.send("restart-app")}),window.addEventListener("contextmenu",e=>{e.preventDefault(),ipcRenderer.send("show-context-menu")}),ipcRenderer.on("getHosts",(event,message)=>{window.hosts=message,localStorage.setItem("hosts",JSON.stringify(message))}),{}),REGION=(process.env.ELECTRON_ENABLE_LOGGING=!0,process.env.AWS_DEFAULT_REGION||"us-east-1"),ACCOUNT=null;function openInBrowser(url){require("electron").shell.openExternal(url)}function setFileHost(url){process.env.FILE_HOST=url}function checkIfCredsAvailable(callback){process.env.hasOwnProperty("AWS_ACCESS_KEY_ID")&&process.env.hasOwnProperty("AWS_SECRET_ACCESS_KEY")&&configureSdkFromEnv(callback)}function setCredentials(data,callback){try{var accessKey,secretKey,sessToken,rows=data.split("\n");if(rows.length<2)callback(new Error("You haven't supplied sufficient information in either the pasted credentials or the supplied key and secret. Please check your inputs and try again."));else{for(let i=0;i<rows.length;i++)rows[i].match(/AWS_ACCESS_KEY_ID/)?(accessKey=rows[i].split("=")[1].replace(/\W/,"").substring(0,20),rows[i].includes(accessKey)&&(process.env.AWS_ACCESS_KEY_ID=accessKey)):rows[i].match(/AWS_SECRET_ACCESS_KEY/)?(secretKey=rows[i].split("=")[1].replace(/[^\w/+]/,"").substring(0,40),rows[i].includes(secretKey)&&(process.env.AWS_SECRET_ACCESS_KEY=secretKey)):rows[i].match(/AWS_SESSION_TOKEN/)&&(sessToken=rows[i].replace(/.+?=/,"").replace(/[^\w/+=]/,""),rows[i].includes(sessToken))&&(process.env.AWS_SESSION_TOKEN=sessToken);process.env.hasOwnProperty("AWS_ACCESS_KEY_ID")&&process.env.hasOwnProperty("AWS_SECRET_ACCESS_KEY")?configureSdkFromEnv(callback,!0):callback(new Error("Wasn't able to parse valid credentials from pasted text!"))}}catch(e){callback(new Error("Credential processing failed: "+JSON.stringify(e)))}}async function configureSdkFromEnv(callback,showError=!1){let sts=new STSClient({region:REGION,credentials:fromEnv()});var command=new GetCallerIdentityCommand;await sts.send(command).then(data=>{data.Account!==process.env.CDK_DEFAULT_ACCOUNT&&resetStacks();var credentialSummary={};credentialSummary.AWS_SECRET_ACCESS_KEY=process.env.AWS_SECRET_ACCESS_KEY.split("").map(x=>"*").join(""),credentialSummary.AWS_ACCESS_KEY_ID=process.env.AWS_ACCESS_KEY_ID,credentialSummary.AWS_ACCOUNT_ID=process.env.CDK_DEFAULT_ACCOUNT=ACCOUNT=data.Account,credentialSummary.IDENTITY=data.Arn.split(":").pop(),credentialSummary.SDK_VERSION=sts.SDK_VERSION;try{callback(null,credentialSummary)}catch(e){}},err=>{showError?callback(new Error("Unable to create a session with the current supplied credentials.")):callback(null,null)})}async function checkSession(callback){var sts,command;process.env.hasOwnProperty("AWS_ACCESS_KEY_ID")&&(sts=new STSClient({region:REGION,credentials:fromEnv()}),command=new GetCallerIdentityCommand,await sts.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)}))}async function getRegions(callback){var client=new EC2Client({region:REGION,credentials:fromEnv()}),command=new DescribeRegionsCommand({});await client.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function getVpcs(callback){var ec2=new EC2Client({region:REGION,credentials:fromEnv()}),command=new DescribeVpcsCommand({});await ec2.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function getSubnets(callback){var ec2=new EC2Client({region:REGION,credentials:fromEnv()}),command=new DescribeSubnetsCommand({});await ec2.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function getEc2KeyPairs(callback){var ec2=new EC2Client({region:REGION,credentials:fromEnv()}),command=new DescribeKeyPairsCommand({});await ec2.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function getAmis(params,callback){var ssm=new SSMClient({region:REGION,credentials:fromEnv()}),params=new GetParametersByPathCommand(params);await ssm.send(params).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function describeAmis(params,callback){var ec2=new EC2Client({region:REGION,credentials:fromEnv()}),params=new DescribeImagesCommand(params);await ec2.send(params).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function describeInstanceTypes(params,callback){var ec2=new EC2Client({region:REGION,credentials:fromEnv()}),params=new DescribeInstanceTypesCommand(params);await ec2.send(params).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function describeDatabaseEngines(filters,callback){var rds=new RDSClient({region:REGION,credentials:fromEnv()}),input={DefaultOnly:!1,ListSupportedCharacterSets:!1,ListSupportedTimezones:!1,IncludeAll:!1,Filters:[filters]};try{let results={},error=null,marker="set";for(;""!==marker;){input.Marker="set"===marker?"":marker;var command=new DescribeDBEngineVersionsCommand(input);await rds.send(command).then(data=>{data.hasOwnProperty("DBEngineVersions")&&(data.DBEngineVersions.forEach(item=>{results.hasOwnProperty(item.Engine)||(results[item.Engine]={}),results[item.Engine].hasOwnProperty(item.EngineVersion)||(results[item.Engine][item.EngineVersion]={}),results[item.Engine][item.EngineVersion]=item}),marker=data.hasOwnProperty("Marker")?data.Marker:"")},err=>{marker="",error=err})}callback(error,results)}catch(e){callback(e,null)}}async function describeDatabaseInstances(engine,callback){var rds=new RDSClient({region:REGION,credentials:fromEnv()}),input={Engine:engine};try{let results={},error=null,marker="set";for(;""!==marker;){input.Marker="set"===marker?"":marker;var command=new DescribeOrderableDBInstanceOptionsCommand(input);await rds.send(command).then(data=>{data.hasOwnProperty("OrderableDBInstanceOptions")&&(data.OrderableDBInstanceOptions.forEach(item=>{results.hasOwnProperty(item.Engine)||(results[item.Engine]={}),results[item.Engine].hasOwnProperty(item.EngineVersion)||(results[item.Engine][item.EngineVersion]={}),results[item.Engine][item.EngineVersion].hasOwnProperty(item.DBInstanceClass)||(results[item.Engine][item.EngineVersion][item.DBInstanceClass]={}),results[item.Engine][item.EngineVersion][item.DBInstanceClass]=item}),marker=data.hasOwnProperty("Marker")?data.Marker:"")},err=>{marker="",error=err})}callback(error,results)}catch(e){callback(e,null)}}async function getPrefixLists(params,callback){var ec2=new EC2Client({region:REGION,credentials:fromEnv()}),params=new DescribeManagedPrefixListsCommand(params);await ec2.send(params).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function listBuckets(callback){var s3=new S3Client({region:REGION,credentials:fromEnv()}),command=new ListBucketsCommand;await s3.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function getCredentialReport(callback){var iam=new IAMClient({region:REGION,credentials:fromEnv()}),command=new GetCredentialReportCommand;await iam.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})}async function generateKeyPair(region,callback){var ec2=new EC2Client({region:REGION,credentials:fromEnv()}),region={KeyName:region+"-ec2-key-pair"},region=new CreateKeyPairCommand(region);await ec2.send(region).then(data=>{callback(null,data)},err=>{callback(err,null)})}function setRegion(region){process.env.AWS_DEFAULT_REGION=process.env.CDK_DEFAULT_REGION=REGION=region}async function prepareRegion(callback){let cloudFormation=new CloudFormationClient({region:REGION,credentials:fromEnv()});var command=new DescribeStacksCommand({StackName:"csk-cdk-app-delivery-pipeline-stack"});await cloudFormation.send(command).then(data=>{data.hasOwnProperty("Stacks")?data.Stacks[0].StackStatus.match(/ATE_COMPLETE/)?callback(null,data):data.Stacks[0].StackStatus.match(/(DELETE_COMPLETE|ROLLBACK_COMPLETE|FAILED)/)&&callback(new Error("Prerequisite stack found but not successfully created - "+data.Stacks[0].StackStatus),null):callback(new Error("Prerequisite stack creation issue.",data),null)},err=>{fs.readFileSync(path.join(rootPath,"pipeline-assets","cdk-app-pipeline","cdk.out","csk-cdk-app-delivery-pipeline.template.json"),"utf-8");var command=new CreateStackCommand({StackName:"csk-cdk-app-delivery-pipeline-stack"});cloudFormation.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})})}async function getFileFromBucket(partialUri,type="json"){partialUri=`https://${process.env.FILE_HOST}/`+partialUri,partialUri=await(await fetch(partialUri,{method:"GET",headers:{"x-access-control":JSON.parse(localStorage.getItem("kitConfig")).KitHubCode}})).text();if("json"===type)try{return JSON.parse(partialUri)}catch(e){return alert(e),{}}else if("yaml"===type)try{let dataobj=yaml.load(partialUri);return dataobj}catch(e){return alert(e),{}}return partialUri}async function getFullCatalogue(callback){var fullCatalogue={},tlCats=await getFileFromBucket("kits/top-level-categories.json"),catDescs=await getFileFromBucket("kits/category-descriptions.json"),cfnKits=await getFileFromBucket("kits/cfn-templates/catalogue.json"),cdkKits=await getFileFromBucket("kits/cdk-apps/catalogue.json"),allKits=cfnKits.Catalogue.concat(cdkKits.Catalogue);for(let i=0;i<allKits.length;i++){var tlc=allKits[i].TopLevelCategory,cat=allKits[i].Category;fullCatalogue.hasOwnProperty(tlc)&&fullCatalogue[tlc].hasOwnProperty(cat)?fullCatalogue[tlc][cat].Kits=fullCatalogue[tlc][cat].Kits.concat(allKits[i].Kits):(fullCatalogue.hasOwnProperty(tlc)||(fullCatalogue[tlc]={}),fullCatalogue[tlc][cat]={Kits:allKits[i].Kits,Description:catDescs[cat]})}var tlCatalogue={};for(let i=0;i<tlCats.length;i++)tlCatalogue[tlCats[i].Label]={Description:tlCats[i].Description,Categories:fullCatalogue[tlCats[i].Label],CategoryOrder:tlCats[i].CategoryOrder};callback(tlCatalogue)}function deriveStackName(template,inputs,stackNamingParam){let stackName="csk-"+template.replace(/\.json/,"").replace(/[^a-zA-Z0-9\-]/g,"").toLowerCase().substring(0,100)+"-stack";for(let i=0;i<inputs.length;i++)inputs[i].ParameterKey===stackNamingParam&&(stackName=`${template.replace(/\.json/,"").toLowerCase()}-${inputs[i].ParameterValue.replace(/[^0-0a-zA-Z]/g).toLowerCase()}-stack`);return stackName}async function deployCloudFormationTemplate(kitId,templateName,stackName,inputs,bucket,callback){var templateJson=await getFileFromBucket("kits/cfn-templates/"+templateName),templateBody=JSON.stringify(templateJson),hasOutputs=templateJson.hasOwnProperty("Outputs"),numResources=Object.keys(templateJson.Resources).length+1,appConfig=JSON.parse(localStorage.getItem("kitConfig")),tags=[{Key:"KitId",Value:kitId},{Key:"AppKey",Value:appConfig.csk_id},{Key:"CreatedBy",Value:appConfig.BusinessName}];if(templateJson.hasOwnProperty("Tags"))for(var tag in templateJson.Tags)tags.push({Key:tag,Value:templateJson.Tags[tag]});uploadIfNeededThenValidate(stackName,inputs,tags,templateName,templateBody,bucket,{kitId:kitId,hasOutputs:hasOutputs,resourceCount:numResources,isDeferred:!1,lastStatus:null,lastStatusTime:null,deployTime:(new Date).getTime(),tracking:!0},callback)}async function uploadIfNeededThenValidate(stackName,inputs,tags,templateName,templateBody,bucket,stackTrackingData,callback){let cfParams={StackName:stackName,Capabilities:["CAPABILITY_NAMED_IAM"],Parameters:inputs,Tags:tags};51999<templateBody.length?bucket?(stackName=new S3Client({region:REGION,credentials:fromEnv()}),inputs={Bucket:bucket,Key:templateName,Body:templateBody},await new Upload({client:stackName,params:inputs}).done().then(data=>{cfParams.TemplateURL=data.Location,validateThenCreate(cfParams,stackTrackingData,callback)}).then(err=>{})):callback(new Error("Template too large for inline deployment and no bucket specified."),null):(cfParams.TemplateBody=templateBody,validateThenCreate(cfParams,stackTrackingData,callback))}async function validateThenCreate(params,stackTrack,callback){let cloudFormation=new CloudFormationClient({region:REGION,credentials:fromEnv()}),minimalParams={};minimalParams=params.hasOwnProperty("TemplateURL")?{TemplateURL:params.TemplateURL}:{TemplateBody:params.TemplateBody};var command=new ValidateTemplateCommand(minimalParams);await cloudFormation.send(command).then(data=>{localStorage.setItem(`${ACCOUNT}-${REGION}-`+params.StackName,JSON.stringify(params)),stacks[params.StackName]=stackTrack;var command=new CreateStackCommand(params);cloudFormation.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})},err=>{callback(err,null)})}function removePathTraversals(path){return path.replace(/\.\.\//g,"")}async function deployCdkViaSourceBucket(kitId,manifestFilename,inputs,region,account,bucketName,callback){var manifest=await getFileFromBucket("kits/cdk-apps/"+(manifestFilename=removePathTraversals(manifestFilename))),appFolder=manifestFilename.replace(/.json$/,"");fs.writeFileSync(path.join(rootPath,"downloaded","kits","cdk-apps",manifestFilename),JSON.stringify(manifest));for(let i=0;i<manifest.FileList.length;i++){var sanitizedFilepath=removePathTraversals(manifest.FileList[i]),file=await getFileFromBucket("kits/cdk-apps/"+sanitizedFilepath,"filedata"),pathToFile=sanitizedFilepath.split("/"),sanitizedFilepath=pathToFile.pop(),dirToCreate=[rootPath,"downloaded","kits","cdk-apps"];for(let j=0;j<pathToFile.length;j++){dirToCreate.push(pathToFile[j]);path.join(...dirToCreate);fs.existsSync(dirToCreate.join("/"))||fs.mkdirSync(dirToCreate.join("/"))}fs.writeFileSync(path.join(rootPath,"downloaded","kits","cdk-apps",...pathToFile,sanitizedFilepath),file)}var usedInputs=await prepCdkAppDirectory(kitId,manifest,appFolder,inputs,region,account),manifestFilename=path.join(rootPath,"downloaded","kits","cdk-apps",appFolder+".zip"),appFolder=new S3Client({region:REGION,credentials:fromEnv()}),bucketName={Bucket:bucketName,Key:"csk-cdk-app.zip",Body:fs.createReadStream(manifestFilename)};let primaryStack=manifest.Stacks[0].name;for(let i=0;i<manifest.Stacks.length;i++){let modifiedStackName=manifest.Stacks[i].name;for(let j=0;j<inputs.length;j++)-1<manifest.Stacks[i].name.indexOf(`{${inputs[j].ParameterKey}}`)&&(modifiedStackName=modifiedStackName.replace(`{${inputs[j].ParameterKey}}`,inputs[j].ParameterValue.replace(/[^a-zA-Z0-9\-]/g,"").toLowerCase().substring(0,100)));localStorage.setItem(account+`-${region}-`+modifiedStackName,JSON.stringify(usedInputs)),0===i&&(primaryStack=modifiedStackName),stacks[modifiedStackName]={kitId:kitId,inputs:inputs,resourceCount:manifest.Stacks[i].resourceCount,hasOutputs:manifest.Stacks[i].hasOutputs,isDeferred:!1,lastStatus:null,lastStatusTime:null,deployTime:(new Date).getTime(),tracking:!0}}await new Upload({client:appFolder,params:bucketName}).done().then(data=>{var codepipeline,pipelineName=localStorage.getItem(`${ACCOUNT}-${REGION}-PipelineName`);pipelineName?(pipelineName={name:pipelineName},codepipeline=new CodePipelineClient({region:REGION,credentials:fromEnv()}),pipelineName=new StartPipelineExecutionCommand(pipelineName),codepipeline.send(pipelineName).then(data=>{callback(null,data,primaryStack)},err=>{callback(err,null,primaryStack)})):callback(null,data,primaryStack)}).then(err=>{callback(err,null,primaryStack)})}async function prepCdkAppDirectory(kitId,manifest,appFolder,inputs,region,account){var appConfig=JSON.parse(localStorage.getItem("kitConfig")),usedInputs=[],appFolderPath=(appFolder=removePathTraversals(appFolder),path.join(rootPath,"downloaded","kits","cdk-apps",appFolder));if(fs.existsSync(appFolderPath)){if(manifest.hasOwnProperty("ConfigFile")){var configTemplate=manifest.ConfigFile.replace(".json","-template.json");if(fs.existsSync(path.join(appFolderPath,configTemplate))){var configJson=JSON.parse(fs.readFileSync(path.join(appFolderPath,configTemplate)));configJson.region=region,configJson.account=account,configJson.kitId=kitId,configJson.appKey=appConfig.csk_id,configJson.businessName=appConfig.BusinessName;for(let i=0;i<inputs.length;i++)configJson.hasOwnProperty(inputs[i].ParameterKey)&&(configJson[inputs[i].ParameterKey]=inputs[i].ParameterValue,usedInputs.push(inputs[i]));fs.writeFileSync(path.join(appFolderPath,removePathTraversals(manifest.ConfigFile)),JSON.stringify(configJson))}}await zipFolder(appFolderPath,path.join(rootPath,"downloaded","kits","cdk-apps",appFolder+".zip"))}return usedInputs}async function zipFolder(folderPath,zipFilePath){var zip=new JSZip;let addFilesToZip=(zipFile,folderPath,currentPath="")=>{folderPath=removePathTraversals(folderPath),currentPath=removePathTraversals(currentPath);var files=fs.readdirSync(path.join(folderPath,currentPath));if(!currentPath.match(/node_modules|cdk.out|tests|\.\w+/))for(var file of files){var file=removePathTraversals(path.join(currentPath,file)),fullFilePath=removePathTraversals(path.join(folderPath,file));fs.statSync(fullFilePath).isDirectory()?addFilesToZip(zipFile,folderPath,file):(fullFilePath=fs.readFileSync(fullFilePath),zipFile.file(file.replace(/\\/g,"/"),fullFilePath))}};addFilesToZip(zip,folderPath),await zip.generateAsync({type:"nodebuffer"}).then(content=>{fs.writeFileSync(zipFilePath,content)}).catch(error=>{})}function getPipelineStatus(execId,callback){var pipelineName=localStorage.getItem(`${ACCOUNT}-${REGION}-PipelineName`),codepipeline=new CodePipelineClient({region:REGION,credentials:fromEnv()});pipelineName&&(pipelineName={pipelineName:pipelineName,pipelineExecutionId:execId},execId=new GetPipelineExecutionCommand(pipelineName),codepipeline.send(execId).then(data=>{callback(null,data)},err=>{callback(err,null)}))}function deleteStack(stackName,callback){var cloudFormation=new CloudFormationClient({region:REGION,credentials:fromEnv()});try{var command=new DeleteStackCommand({StackName:stackName});cloudFormation.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})}catch(e){callback(e,null)}}contextBridge.exposeInMainWorld("openInBrowser",url=>openInBrowser(url)),contextBridge.exposeInMainWorld("setFileHost",url=>setFileHost(url)),contextBridge.exposeInMainWorld("checkIfCredsAvailable",callback=>checkIfCredsAvailable(callback)),contextBridge.exposeInMainWorld("setCredentials",(data,cb)=>setCredentials(data,cb)),contextBridge.exposeInMainWorld("checkSession",callback=>checkSession(callback)),contextBridge.exposeInMainWorld("getRegions",cb=>getRegions(cb)),contextBridge.exposeInMainWorld("getVpcs",cb=>getVpcs(cb)),contextBridge.exposeInMainWorld("getSubnets",cb=>getSubnets(cb)),contextBridge.exposeInMainWorld("getEc2KeyPairs",cb=>getEc2KeyPairs(cb)),contextBridge.exposeInMainWorld("getAmis",(params,cb)=>getAmis(params,cb)),contextBridge.exposeInMainWorld("describeAmis",(params,cb)=>describeAmis(params,cb)),contextBridge.exposeInMainWorld("describeInstanceTypes",(params,cb)=>describeInstanceTypes(params,cb)),contextBridge.exposeInMainWorld("describeDatabaseEngines",(f,cb)=>describeDatabaseEngines(f,cb)),contextBridge.exposeInMainWorld("describeDatabaseInstances",(f,cb)=>describeDatabaseInstances(f,cb)),contextBridge.exposeInMainWorld("getPrefixLists",(params,cb)=>getPrefixLists(params,cb)),contextBridge.exposeInMainWorld("listBuckets",cb=>listBuckets(cb)),contextBridge.exposeInMainWorld("getCredentialReport",cb=>getCredentialReport(cb)),contextBridge.exposeInMainWorld("generateKeyPair",(region,cb)=>generateKeyPair(region,cb)),contextBridge.exposeInMainWorld("setRegion",region=>setRegion(region)),contextBridge.exposeInMainWorld("prepareRegion",cb=>prepareRegion(cb)),contextBridge.exposeInMainWorld("getFileFromBucket",(p,t)=>getFileFromBucket(p,t)),contextBridge.exposeInMainWorld("getFullCatalogue",cb=>getFullCatalogue(cb)),contextBridge.exposeInMainWorld("deriveStackName",(template,inputs)=>deriveStackName(template,inputs)),contextBridge.exposeInMainWorld("deployCloudFormationTemplate",(kitId,template,stackName,inputs,bucket,cb)=>deployCloudFormationTemplate(kitId,template,stackName,inputs,bucket,cb)),contextBridge.exposeInMainWorld("deployCdkViaSourceBucket",(kitId,manifestFilename,inputs,region,account,bucketName,callback)=>deployCdkViaSourceBucket(kitId,manifestFilename,inputs,region,account,bucketName,callback)),contextBridge.exposeInMainWorld("getPipelineStatus",(pipeline,cb)=>getPipelineStatus(pipeline,cb)),contextBridge.exposeInMainWorld("deleteStack",stack=>deleteStack(stack));let stackEvents={},stackTokens={},stackIds={};function getAllStackEvents(stackName,callback){var cloudFormation=new CloudFormationClient({region:REGION,credentials:fromEnv()}),params=(stackEvents.hasOwnProperty(stackName)||(stackEvents[stackName]=[]),stackTokens[stackName]=null,{StackName:stackName,NextToken:stackTokens[stackName]});stackIds.hasOwnProperty(stackName)&&(params.StackId=stackIds[stackName]);do{var command=new DescribeStackEventsCommand(params);cloudFormation.send(command).then(data=>{for(let i=0;i<data.StackEvents.length;i++)new Date(data.StackEvents[i].Timestamp).getTime()>stacks[stackName].deployTime&&stackEvents[stackName].push(data.StackEvents[i]);stackTokens[stackName]=data.NextToken},err=>{stackTokens[stackName]=null,callback(err,{StackEvents:stackEvents[stackName]})})}while(null!==stackTokens[stackName]);callback(null,{StackEvents:stackEvents[stackName]})}function getStackEvents(stackName,callback){stacks.hasOwnProperty(stackName)&&stacks[stackName].tracking&&getAllStackEvents(stackName,(err,data)=>{if(data){let stackStatus=null;var resourceEvents={},timeOrderedEvents=[],timeOrderedEventObj={};if(0<data.StackEvents.length){for(let i=0;i<data.StackEvents.length;i++){var timeKey=(new Date(data.StackEvents[i].Timestamp).getTime()+"-"+data.StackEvents[i].LogicalResourceId).replace(/\W/g,"");timeOrderedEventObj.hasOwnProperty(timeKey)||(timeOrderedEvents.push(timeKey),timeOrderedEventObj[timeKey]=data.StackEvents[i])}timeOrderedEvents.sort();for(let i=0;i<timeOrderedEvents.length;i++){var thisEvent=timeOrderedEventObj[timeOrderedEvents[i]];thisEvent.LogicalResourceId===stackName?(stackStatus=thisEvent,stacks[stackName].lastStatus=thisEvent.ResourceStatus,stacks[stackName].lastStatusTime=new Date(thisEvent.Timestamp).getTime()):resourceEvents[thisEvent.LogicalResourceId]=thisEvent}}stackStatus,callback(stackName,stackStatus,resourceEvents)}!err||stacks.hasOwnProperty(stackName)&&stacks[stackName].hasOwnProperty("isDeferred")&&stacks[stackName].isDeferred||stacks.hasOwnProperty(stackName)&&err.toString().match(/does not exist/)||(stacks.hasOwnProperty(stackName)&&stacks[stackName].hasOwnProperty("lastStatus")&&null!==stacks[stackName].lastStatus&&!stacks[stackName].lastStatus.match(/does not exist/)?handleFailedStack(stackName):(stacks.hasOwnProperty(stackName)&&stacks[stackName].hasOwnProperty("lastStatus")&&stacks[stackName].lastStatus!==err||stacks.hasOwnProperty(stackName))&&(stacks[stackName].lastStatus=err,handleFailedStack(stackName)))})}async function getStackInfo(stackName,callback){var cloudFormation=new CloudFormationClient({region:REGION,credentials:fromEnv()}),command=new DescribeStacksCommand({StackName:stackName});await cloudFormation.send(command).then(data=>{callback(data.Stacks[0].StackName,data)},err=>{err.message.match(/Stack with id (.*) does not exist/)&&handleFailedStack(stackName),callback(stackName,err)})}async function listStacks(callback){var cloudFormation=new CloudFormationClient({region:REGION,credentials:fromEnv()});try{var command=new DescribeStacksCommand;await cloudFormation.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})}catch(e){callback(e,[])}}async function getStackStatus(stackName,callback){var cloudFormation=new CloudFormationClient({region:REGION,credentials:fromEnv()});try{var command=new DescribeStacksCommand({StackName:stackName});await cloudFormation.send(command).then(data=>{callback(null,data)},err=>{callback(err,null)})}catch(e){callback(e,null)}}function getStacksInProgress(){return stacks}function handleFailedStack(stackName){!stacks.hasOwnProperty(stackName)||stacks[stackName].hasOwnProperty("reliesOn")&&stacks.hasOwnProperty(stacks[stackName].reliesOn)||stacks[stackName].hasOwnProperty("deleteTime")&&null!==stacks[stackName].deleteTime||(stacks[stackName].deleteTime=(new Date).getTime()+6e5)}function handleCompletedStack(stackName){!stacks.hasOwnProperty(stackName)||stacks[stackName].hasOwnProperty("deleteTime")&&null!==stacks[stackName].deleteTime||(stacks[stackName].deleteTime=(new Date).getTime()+3e5)}function keepWatchingStack(stackName){stacks.hasOwnProperty(stackName)&&stacks[stackName].hasOwnProperty("deleteTime")&&(stacks[stackName].deleteTime=null)}function clearTrackedStacks(stackName){if(stackName)stacks[stackName].deleteTime=(new Date).getTime()+3e4;else for(var key in stacks)stacks[key].deleteTime=(new Date).getTime()+3e4}function resetStacks(){for(var key in stacks)delete stacks[key]}contextBridge.exposeInMainWorld("getStackEvents",(stack,cb)=>getStackEvents(stack,cb)),contextBridge.exposeInMainWorld("getStackInfo",(stack,cb)=>getStackInfo(stack,cb)),contextBridge.exposeInMainWorld("listStacks",(stack,cb)=>listStacks(stack,cb)),contextBridge.exposeInMainWorld("getStackStatus",(stackName,cb)=>getStackStatus(stackName,cb)),contextBridge.exposeInMainWorld("getStacksInProgress",()=>getStacksInProgress()),contextBridge.exposeInMainWorld("handleFailedStack",stackName=>handleFailedStack(stackName)),contextBridge.exposeInMainWorld("handleCompletedStack",stackName=>handleCompletedStack(stackName)),contextBridge.exposeInMainWorld("keepWatchingStack",stackName=>keepWatchingStack(stackName)),contextBridge.exposeInMainWorld("clearTrackedStacks",stackName=>clearTrackedStacks(stackName));let defaultStrings=yaml.load(fs.readFileSync(path.join(rootPath,"src","i18n","en-US.yaml"),"utf8")),parser=(window.addEventListener("LanguageChange",()=>{var key,lang=document.getElementById("lang-select").value||window.resellerConfig.PreferredLanguage,lang=yaml.load(fs.readFileSync(path.join(rootPath,"src","i18n",lang+".yaml"),"utf8")),combinedStrings={...defaultStrings,...lang};for(key of Object.keys(combinedStrings))replaceText("strings-"+key,combinedStrings[key]);dispatchEvent(new Event("TEXT_LOADED"))}),new DOMParser),replaceText=(selector,text)=>{var doc,selector=document.getElementById(selector);selector&&(doc=parser.parseFromString(text,"text/html"),Array.from(doc.body.childNodes).some(node=>1===node.nodeType)?selector.appendChild(doc.documentElement):selector.innerText=text)};window.addEventListener("DOMContentLoaded",()=>{for(var type of["chrome","node","electron","cdk","sdk"])replaceText(type+"-version",process.versions[type])});